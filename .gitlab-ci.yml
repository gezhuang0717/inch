# Don't trigger the pipline if only one of these files has changed
.fileignore_template: &CI_Ignore
  except:
    changes:
      - "*.md"
      - appveyor.yml
      - .travis.yml
      - .circleci/*
      - .github/*
      - scripts/*
      - images/*
      - data_files/*
      - docs/*

# Generic commands for building and running the tests
.build__template: &Build
  - cmake --build ./build

.run_test_template: &RunTests
  - cd build
  - ctest -j2 -V

.gcc_install_template: &GCCPackage
  - apt -y install gcc g++ gcc-8 g++-8

stages:
  - configure
  - build
  - test
  #- gcc-build
  #- clang-build

# Specify "rolling" rather than "latest"
# We need gcc >=8 and clang >=7 for std::filesystem
image: ubuntu:rolling

# Install the required packages to run the jobs of all stages
before_script:
  - apt update && apt -y install cmake ninja-build

# Make sure the submodules are pulled in
variables:
  GIT_SUBMODULE_STRATEGY: recursive

# GCC - Debug
gcc-configure-Debug:
  stage: configure
  <<: *CI_Ignore
  tags:
    - linux
  script:
    - *GCCPackages
    - cmake -H. -B./build -GNinja -DINCH_UNIT_TESTS=ON -DCMAKE_CXX_COMPILER=/usr/bin/g++-8 -DCMAKE_BUILD_TYPE=Debug
  artifacts:
    paths:
      - build

gcc-build-Debug:
  stage: build
  <<: *CI_Ignore
  tags:
    - linux
  script:
    - *GCCPackages
    - *Build
  artifacts:
    paths:
      - build
  dependencies:
    - gcc-configure-Debug

gcc-test-Debug:
  stage: test
  <<: *CI_Ignore
  tags:
    - linux
  script:
    - *GCCPackages
    - *RunTests
  dependencies:
    - gcc-build-Debug


#gcc-build-Release:
#  stage: gcc-build
#  <<: *CI_Ignore
#  tags:
#    - linux
#  script:
#    - apt -y install gcc g++ gcc-8 g++-8
#    - cmake -H. -B../build -GNinja -DINCH_UNIT_TESTS=ON -DCMAKE_CXX_COMPILER=/usr/bin/g++-8 -DCMAKE_BUILD_TYPE=Release
#    - *Build_n_Test
#
## clang/LLVM
#clang-build-Debug:
#  stage: clang-build
#  <<: *CI_Ignore
#  tags:
#    - linux
#  script:
#    - apt -y install clang clang-8 libstdc++-8-dev
#    - cmake -H. -B../build -GNinja -DINCH_UNIT_TESTS=ON -DCMAKE_CXX_COMPILER=/usr/bin/clang++-8 -DCMAKE_BUILD_TYPE=Debug
#    - *Build_n_Test
#
#clang-build-Release:
#  stage: clang-build
#  <<: *CI_Ignore
#  tags:
#    - linux
#  script:
#    - apt -y install clang clang-8 libstdc++-8-dev
#    - cmake -H. -B../build -GNinja -DINCH_UNIT_TESTS=ON -DCMAKE_CXX_COMPILER=/usr/bin/clang++-8 -DCMAKE_BUILD_TYPE=Release
#    - *Build_n_Test
